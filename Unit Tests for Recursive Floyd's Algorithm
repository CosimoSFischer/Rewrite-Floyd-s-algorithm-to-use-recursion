import unittest
import sys
import itertools


# Global variables representing no path and the graph
NO_PATH = sys.maxsize
graph = [
    [0, 7, NO_PATH, 8],
    [NO_PATH, 0, 5, NO_PATH],
    [NO_PATH, NO_PATH, 0, 2],
    [NO_PATH, NO_PATH, NO_PATH, 0]
]
MAX_LENGTH = len(graph[0])


# Recursive implementation of Floyd's algorithm
def floyd_recursive(intermediate, start_node, end_node):
    global graph

    if start_node == MAX_LENGTH:
        return
  
    if intermediate == MAX_LENGTH:
        return floyd_recursive(0, start_node + 1, end_node)

    if end_node == MAX_LENGTH:
        return floyd_recursive(intermediate + 1, start_node, 0)

    if start_node == end_node:
        graph[start_node][end_node] = 0
    else:
        graph[start_node][end_node] = min(
            graph[start_node][end_node],
            graph[start_node][intermediate] + graph[intermediate][end_node]
        )

    return floyd_recursive(intermediate, start_node, end_node + 1)


# Wrapper function to start Floyd's algorithm
def floyd():
    floyd_recursive(0, 0, 0)
    return graph


# Unit tests for the Floyd's algorithm implementation
class TestFloyd(unittest.TestCase):
    # Test case 1: Check if the distance from node 0 to node 3 is correct
    def test_distance_from_0_to_3(self):
        # The expected shortest distance from node 0 to node 3 is 8
        expected_distance = 8

        # Run Floyd's algorithm
        result_graph = floyd()

        # Check if the calculated distance matches the expected distance
        self.assertEqual(result_graph[0][3], expected_distance)


    # Test case 2: Check if there is a path from node 1 to node 2
    def test_path_from_1_to_2(self):
        # Run Floyd's algorithm
        result_graph = floyd()

        # Check if there is a path from node 1 to node 2
        self.assertNotEqual(result_graph[1][2], NO_PATH)


    # Test case 3: Check if the distance from node 2 to node 0 is correct
    def test_distance_from_2_to_0(self):
        # The expected shortest distance from node 2 to node 0 is NO_PATH
        expected_distance = NO_PATH

        # Run Floyd's algorithm
        result_graph = floyd()

        # Check if the calculated distance matches the expected distance
        self.assertEqual(result_graph[2][0], expected_distance)

if __name__ == '__main__':
    unittest.main()
    

print(graph)
